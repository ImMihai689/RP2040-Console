#pragma once

typedef char color_t;


#define TRANSPARENT (char)0;
#define INVERT (char)1;
#define BLACK (char)2;
#define WHITE (char)3;

class Frame {
    private:
        unsigned char buffer[1024] = {0};

        inline void drawPixelFastWhite(int x, int y)
        {
            int page = y >> 3;
            buffer[(page << 7) + x] |= (int)(1 << (y & 7));
        }

        inline void drawPixelFastBlack(int x, int y)
        {
            int page = y >> 3;
            buffer[(page << 7) + x] &= (int)(((int)0xFF) << (y & 7));
        }

        inline void drawPixelFastInverted(int x, int y)
        {
            int page = y >> 3;
            buffer[(page << 7) + x] ^= (int)(1 << (y & 7));
        }

        static constexpr unsigned short dither_shade_mask[17] = {
            0b0000000000000000,
            0b1000000000000000,
            0b1000000000100000,
            0b1000000010100000,
            0b1010000010100000,
            0b1010010010100000,
            0b1010010010100001,
            0b1010010010100101,
            0b1010010110100101,
            0b1010011110100101,
            0b1010011110101101,
            0b1010011110101111,
            0b1010111110101111,
            0b1110111110101111,
            0b1110111110111111,
            0b1110111111111111,
            0b1111111111111111,
        };

        static constexpr unsigned char font5x7[106][5] = {
            {0x00, 0x00, 0x00, 0x00, 0x00}, // 
            {0x00, 0x00, 0x5f, 0x00, 0x00}, // !
            {0x00, 0x03, 0x00, 0x03, 0x00}, // "
            {0x14, 0x7f, 0x14, 0x7f, 0x14}, // #
            {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // $
            {0x23, 0x13, 0x08, 0x64, 0x62}, // %
            {0x36, 0x49, 0x56, 0x20, 0x50}, // &
            {0x00, 0x00, 0x03, 0x00, 0x00}, // '
            {0x00, 0x1c, 0x22, 0x41, 0x00}, // (
            {0x00, 0x41, 0x22, 0x1c, 0x00}, // )
            {0x00, 0x05, 0x02, 0x05, 0x00}, // *
            {0x00, 0x08, 0x1c, 0x08, 0x00}, // +
            {0x00, 0x40, 0x20, 0x00, 0x00}, // ,
            {0x00, 0x08, 0x08, 0x08, 0x00}, // -
            {0x00, 0x00, 0x40, 0x00, 0x00}, // .
            {0x20, 0x10, 0x08, 0x04, 0x02}, // /
            {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0
            {0x44, 0x42, 0x7f, 0x40, 0x40}, // 1
            {0x62, 0x51, 0x49, 0x49, 0x46}, // 2
            {0x22, 0x41, 0x49, 0x49, 0x36}, // 3
            {0x18, 0x14, 0x12, 0x7f, 0x10}, // 4
            {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
            {0x3e, 0x49, 0x49, 0x49, 0x32}, // 6
            {0x01, 0x01, 0x79, 0x05, 0x03}, // 7
            {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
            {0x26, 0x49, 0x49, 0x49, 0x3e}, // 9
            {0x00, 0x00, 0x24, 0x00, 0x00}, // :
            {0x00, 0x40, 0x24, 0x00, 0x00}, // ;
            {0x00, 0x08, 0x14, 0x22, 0x00}, // <
            {0x00, 0x14, 0x14, 0x14, 0x00}, // =
            {0x00, 0x22, 0x14, 0x08, 0x00}, // >
            {0x02, 0x01, 0x51, 0x09, 0x06}, // ?
            {0x3e, 0x41, 0x5d, 0x55, 0x4e}, // @
            {0x7e, 0x09, 0x09, 0x09, 0x7e}, // A
            {0x7f, 0x49, 0x49, 0x49, 0x36}, // B
            {0x3e, 0x41, 0x41, 0x41, 0x22}, // C
            {0x7f, 0x41, 0x41, 0x41, 0x3e}, // D
            {0x7f, 0x49, 0x49, 0x41, 0x41}, // E
            {0x7f, 0x09, 0x09, 0x01, 0x01}, // F
            {0x3e, 0x41, 0x49, 0x49, 0x3a}, // G
            {0x7f, 0x08, 0x08, 0x08, 0x7f}, // H
            {0x00, 0x00, 0x7f, 0x00, 0x00}, // I
            {0x20, 0x40, 0x40, 0x3f, 0x00}, // J
            {0x7f, 0x08, 0x14, 0x22, 0x41}, // K
            {0x7f, 0x40, 0x40, 0x40, 0x40}, // L
            {0x7f, 0x02, 0x04, 0x02, 0x7f}, // M
            {0x7f, 0x04, 0x08, 0x10, 0x7f}, // N
            {0x3e, 0x41, 0x41, 0x41, 0x3e}, // O
            {0x7f, 0x09, 0x09, 0x09, 0x06}, // P
            {0x3e, 0x41, 0x51, 0x61, 0x7e}, // Q
            {0x7f, 0x09, 0x09, 0x09, 0x76}, // R
            {0x46, 0x49, 0x49, 0x49, 0x31}, // S
            {0x01, 0x01, 0x7f, 0x01, 0x01}, // T
            {0x3f, 0x40, 0x40, 0x40, 0x3f}, // U
            {0x1f, 0x20, 0x40, 0x20, 0x1f}, // V
            {0x7f, 0x20, 0x18, 0x20, 0x7f}, // W
            {0x63, 0x14, 0x08, 0x14, 0x63}, // X
            {0x03, 0x04, 0x78, 0x04, 0x03}, // Y
            {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
            {0x00, 0x7f, 0x41, 0x41, 0x00}, // [
            {0x02, 0x04, 0x08, 0x10, 0x20}, // backslash
            {0x00, 0x41, 0x41, 0x7f, 0x00}, // ]
            {0x04, 0x02, 0x01, 0x02, 0x04}, // ^
            {0x40, 0x40, 0x40, 0x40, 0x40}, // _
            {0x00, 0x00, 0x01, 0x02, 0x00}, // `
            {0x20, 0x54, 0x54, 0x54, 0x78}, // a
            {0x7f, 0x48, 0x44, 0x44, 0x38}, // b
            {0x38, 0x44, 0x44, 0x44, 0x28}, // c
            {0x38, 0x44, 0x44, 0x48, 0x7f}, // d
            {0x38, 0x54, 0x54, 0x54, 0x58}, // e
            {0x08, 0x7e, 0x09, 0x01, 0x02}, // f
            {0x08, 0x54, 0x54, 0x54, 0x38}, // g
            {0x7f, 0x08, 0x08, 0x08, 0x70}, // h
            {0x00, 0x44, 0x7d, 0x40, 0x00}, // i
            {0x20, 0x40, 0x44, 0x3d, 0x00}, // j
            {0x7f, 0x10, 0x28, 0x44, 0x00}, // k
            {0x00, 0x41, 0x7f, 0x40, 0x00}, // l
            {0x7c, 0x04, 0x7c, 0x04, 0x78}, // m
            {0x7c, 0x04, 0x04, 0x04, 0x78}, // n
            {0x38, 0x44, 0x44, 0x44, 0x38}, // o
            {0x00, 0x7c, 0x14, 0x14, 0x08}, // p
            {0x08, 0x14, 0x14, 0x7c, 0x00}, // q
            {0x7c, 0x08, 0x04, 0x04, 0x08}, // r
            {0x48, 0x54, 0x54, 0x54, 0x24}, // s
            {0x00, 0x04, 0x3f, 0x44, 0x40}, // t
            {0x3c, 0x40, 0x40, 0x20, 0x7c}, // u
            {0x1c, 0x20, 0x40, 0x20, 0x1c}, // v
            {0x7c, 0x20, 0x70, 0x20, 0x7c}, // w
            {0x44, 0x28, 0x10, 0x28, 0x44}, // x
            {0x4c, 0x50, 0x50, 0x50, 0x3c}, // y
            {0x44, 0x64, 0x54, 0x4c, 0x44}, // z
            {0x00, 0x08, 0x36, 0x41, 0x00}, // {
            {0x00, 0x00, 0x7f, 0x00, 0x00}, // |
            {0x00, 0x41, 0x41, 0x7f, 0x00}, // }
            {0x08, 0x04, 0x04, 0x08, 0x04}, // ~
            {0x3e, 0x22, 0x1c, 0x3e, 0x2a}, // DEL
            {0x7e, 0x09, 0x09, 0x09, 0x7e}, // Ă // temp A // 0x80
            {0x7e, 0x09, 0x09, 0x09, 0x7e}, // Â // temp A // 0x81
            {0x00, 0x02, 0x7d, 0x02, 0x00}, // Î // 0x82
            {0x46, 0xc9, 0xc9, 0x49, 0x31}, // Ș // 0x83
            {0x01, 0x81, 0x7f, 0x01, 0x01}, // Ț // 0x84
            {0x20, 0x55, 0x56, 0x55, 0x78}, // ă // 0x85
            {0x20, 0x56, 0x55, 0x56, 0x78}, // â // 0x86
            {0x00, 0x4a, 0x79, 0x42, 0x00}, // î // 0x87
            {0x48, 0xd4, 0xd4, 0x54, 0x24}, // ș // 0x88
            {0x00, 0x04, 0xbf, 0xc4, 0x40}, // ț // 0x89
        };

    public:
        Frame();
        ~Frame();

        void clearFrame();
        void fillFrame(unsigned char data);
        void drawPixel(int x, int y, color_t color);
        void drawLineHorizontal(int x, int y, int w, color_t color);
        void drawLineVertical(int x, int y, int h, color_t color);
        void drawLine(int x0, int y0, int x1, int y1, color_t color);
        void drawTriangle(int x0, int y0, int x1, int y1, int x2, int y2, color_t color);
        void drawTriangleFilled(int x0, int y0, int x1, int y1, int x2, int y2, color_t color);
        void drawBitmap(int x, int y, const unsigned char *bitmap, int w, int h, color_t color);
        void drawChar(int x, int y, char character, color_t color);
        void drawText(int x, int y, char *text, int no_chars, color_t color);
        void drawText(int x, int y, const char *text, int no_chars, color_t color);

        inline unsigned char * get_data() {
            return buffer;
        }
};